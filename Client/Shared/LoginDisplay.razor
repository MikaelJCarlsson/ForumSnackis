@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Snackis</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        @if (AuthState is not null && AuthState.User.Identity.IsAuthenticated)
        {
            <li>
                <NavLink class="nav-link" href="">
                    <span class="nav-link btn btn-link" @onclick="BeginSignOut">Log out</span>
                </NavLink>
            </li>
        }
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="authentication/register">

                <span class="oi oi-list-rich"> Register</span>
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="authentication/login">

                <span> Log in</span>
            </NavLink>
        </li>
    </ul>
</div>



@code{
    public AuthenticationState AuthState { get; set; }


    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }


    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;

    }

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

    }

}
